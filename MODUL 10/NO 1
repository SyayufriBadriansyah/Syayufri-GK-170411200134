/*
 * GLUT Shapes Demo
 *
 * Written by Nigel Stewart November 2003
 *
 * This program is test harness for the sphere, cone
 * and torus shapes in GLUT.
 *
 * Spinning wireframe and smooth shaded shapes are
 * displayed until the ESC or q key is pressed.  The
 * number of geometry stacks and slices can be adjusted
 * using the + and - keys.
 */

#include<windows.h>
#ifdef __APPLE__
#include <GLUT/glut.h>
#else
#include <GL/glut.h>
#endif

#include <stdlib.h>

boolean diff = true, spec = true, amb = true;

float theta = 0.0;

void display()
{
    glClear(GL_COLOR_BUFFER_BIT| GL_DEPTH_BUFFER_BIT);
    glLoadIdentity();
    glRotated(35, 0,0,0);
    GLfloat mat_specular[] = { 0.7, 0.7, 0.7, 1.0 };
    GLfloat mat_shininess[] = { 10.0 };
    GLfloat mat_diffuse[] = { 0.7, 0.7, 0.7, 1.0 };
    glMaterialfv(GL_FRONT, GL_SPECULAR, mat_specular);
    glMaterialfv(GL_FRONT, GL_SHININESS, mat_shininess);
    glMaterialfv(GL_FRONT, GL_DIFFUSE, mat_diffuse);
    glRotatef(theta, 1,0,1);

    //depan
    glColor3f(0.5,0.5,0.7);
    glBegin(GL_POLYGON);
    glVertex3f(5.0, 3.0, 0.0);
    glVertex3f(5.0, -3.0, 0.0);
    glVertex3f(5.0, -3.0, 5.0);
    glVertex3f(5.0, 3.0, 5.0);
    glEnd();

    //depan pintu
    glColor3f(0.7,0.9,0.0);
    glBegin(GL_POLYGON);
    glVertex3f(5.01, -2.0, 4.0);
    glVertex3f(5.01, -2.0, 0.0);
    glVertex3f(5.01, -0.25, 0.0);
    glVertex3f(5.01, -0.25, 4.0);
    glEnd();

    //depan jendela
    glColor3f(0.7,0.9,0.0);
    glBegin(GL_POLYGON);
    glVertex3f(5.01, 2.0, 4.0);
    glVertex3f(5.01, 2.0, 2.0);
    glVertex3f(5.01, 0.25, 2.0);
    glVertex3f(5.01, 0.25, 4.0);
    glEnd();

    //belakang
    glColor3f(0.5,0.5,0.7);
    glBegin(GL_POLYGON);
    glVertex3f(-5.0, 3.0, 0.0);
    glVertex3f(-5.0, -3.0, 0.0);
    glVertex3f(-5.0, -3.0, 5.0);
    glVertex3f(-5.0, 3.0, 5.0);
    glEnd();

    //belakang huruf a
    glColor3f(0.0,0.0,1.0);
    glBegin(GL_POLYGON);
    glVertex3f(-5.01, 2.0, 1.0);
    glVertex3f(-5.01, 0.5, 4.0);
    glVertex3f(-5.01, -0.5, 4.0);
    glVertex3f(-5.01, 1.0, 1.0);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(-5.01, -2.0, 1.0);
    glVertex3f(-5.01, -0.5, 4.0);
    glVertex3f(-5.01, 0.5, 4.0);
    glVertex3f(-5.01, -1.0, 1.0);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(-5.01, 1.0, 2.5);
    glVertex3f(-5.01, -1.0, 2.5);
    glVertex3f(-5.01, -1.0, 1.5);
    glVertex3f(-5.01, 1.0, 1.5);
    glEnd();

    //samping kanan
    glColor3f(0.5,0.5,0.5);
    glBegin(GL_POLYGON);
    glVertex3f(5.0, 3.0, 0.0);
    glVertex3f(5.0, 3.0, 5.0);
    glVertex3f(-5.0, 3.0, 5.0);
    glVertex3f(-5.0, 3.0, 0.0);
    glEnd();

    //samping kanan jendela 1
    glColor3f(1.0,1.0,1.0);
    glBegin(GL_POLYGON);
    glVertex3f(4.0, 3.01, 2.0);
    glVertex3f(4.0, 3.01, 4.0);
    glVertex3f(2.0, 3.01, 4.0);
    glVertex3f(2.0, 3.01, 2.0);
    glEnd();

    //samping kanan jendela 2
    glColor3f(1.0,1.0,1.0);
    glBegin(GL_POLYGON);
    glVertex3f(1.0, 3.01, 2.0);
    glVertex3f(1.0, 3.01, 4.0);
    glVertex3f(-1.0, 3.01, 4.0);
    glVertex3f(-1.0, 3.01, 2.0);
    glEnd();

    //samping kanan jendela 1
    glColor3f(1.0,1.0,1.0);
    glBegin(GL_POLYGON);
    glVertex3f(-2.0, 3.01, 2.0);
    glVertex3f(-2.0, 3.01, 4.0);
    glVertex3f(-4.0, 3.01, 4.0);
    glVertex3f(-4.0, 3.01, 2.0);
    glEnd();

    //samping kiri
    glColor3f(0.5,0.5,0.5);
    glBegin(GL_POLYGON);
    glVertex3f(5.0, -3.0, 0.0);
    glVertex3f(5.0, -3.0, 5.0);
    glVertex3f(-5.0, -3.0, 5.0);
    glVertex3f(-5.0, -3.0, 0.0);
    glEnd();

    //samping kiri angka 1
    glColor3f(1.0,1.0,0.0);
    glBegin(GL_POLYGON);
    glVertex3f(-4.0, -3.01, 1.0);
    glVertex3f(-4.0, -3.01, 1.5);
    glVertex3f(-2.0, -3.01, 1.5);
    glVertex3f(-2.0, -3.01, 1.0);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(-3.25, -3.01, 1.5);
    glVertex3f(-3.25, -3.01, 4.0);
    glVertex3f(-2.75, -3.01, 4.0);
    glVertex3f(-2.75, -3.01, 1.5);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(-4.0, -3.01, 3.0);
    glVertex3f(-4.0, -3.01, 3.5);
    glVertex3f(-3.25, -3.01, 4.0);
    glVertex3f(-3.25, -3.01, 3.5);
    glEnd();

    //samping kiri angka 3
    glBegin(GL_POLYGON);
    glVertex3f(-1.0, -3.01, 4.0);
    glVertex3f(1.0, -3.01, 4.0);
    glVertex3f(1.0, -3.01, 3.5);
    glVertex3f(-1.0, -3.01, 3.5);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(0.5, -3.01, 4.0);
    glVertex3f(1.0, -3.01, 4.0);
    glVertex3f(1.0, -3.01, 1.0);
    glVertex3f(0.5, -3.01, 1.0);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(-1.0, -3.01, 2.75);
    glVertex3f(1.0, -3.01, 2.75);
    glVertex3f(1.0, -3.01, 2.25);
    glVertex3f(-1.0, -3.01, 2.25);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(-1.0, -3.01, 1.5);
    glVertex3f(1.0, -3.01, 1.5);
    glVertex3f(1.0, -3.01, 1.0);
    glVertex3f(-1.0, -3.01, 1.0);
    glEnd();

    //samping kiri angka 4
    glBegin(GL_POLYGON);
    glVertex3f(3.5, -3.01, 4.0);
    glVertex3f(4.0, -3.01, 4.0);
    glVertex3f(4.0, -3.01, 1.0);
    glVertex3f(3.5, -3.01, 1.0);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(2.0, -3.01, 4.0);
    glVertex3f(2.5, -3.01, 4.0);
    glVertex3f(2.5, -3.01, 2.75);
    glVertex3f(2.0, -3.01, 2.75);
    glEnd();

    glBegin(GL_POLYGON);
    glVertex3f(2.0, -3.01, 2.75);
    glVertex3f(4.0, -3.01, 2.75);
    glVertex3f(4.0, -3.01, 2.25);
    glVertex3f(2.0, -3.01, 2.25);
    glEnd();

    //bagian rumah bawah
    glColor3f(0.0,1.0,1.0);
    glBegin(GL_POLYGON);
    glVertex3f(-5.0, -3.0, 0.0);
    glVertex3f(5.0, -3.0, 0.0);
    glVertex3f(5.0, 3.0, 0.0);
    glVertex3f(-5.0, 3.0, 0.0);
    glEnd();

    //bagian rumah atas
    glColor3f(0.0,1.0,1.0);
    glBegin(GL_POLYGON);
    glVertex3f(-6.0, -4.0, 5.0);
    glVertex3f(6.0, -4.0, 5.0);
    glVertex3f(6.0, 4.0, 5.0);
    glVertex3f(-6.0, 4.0, 5.0);
    glEnd();

    //atap depan
    glColor3f(0.5,0.0,0.0);
    glBegin(GL_POLYGON);
    glVertex3f(6.0, -4.0, 5.0);
    glVertex3f(6.0, 4.0, 5.0);
    glVertex3f(3.0, 0.0, 8.0);
    glEnd();

    //atap kanan
    glColor3f(0.7,0.0,0.0);
    glBegin(GL_POLYGON);
    glVertex3f(6.0, 4.0, 5.0);
    glVertex3f(3.0, 0.0, 8.0);
    glVertex3f(-3.0, 0.0, 8.0);
    glVertex3f(-6.0, 4.0, 5.0);
    glEnd();

    //atap kiri
    glColor3f(0.7,0.0,0.0);
    glBegin(GL_POLYGON);
    glVertex3f(6.0, -4.0, 5.0);
    glVertex3f(3.0, 0.0, 8.0);
    glVertex3f(-3.0, 0.0, 8.0);
    glVertex3f(-6.0, -4.0, 5.0);
    glEnd();

    //atap belakang
    glColor3f(0.5,0.0,0.0);
    glBegin(GL_POLYGON);
    glVertex3f(-6.0, 4.0, 5.0);
    glVertex3f(-6.0, -4.0, 5.0);
    glVertex3f(-3.0, 0.0, 8.0);
    glEnd();

    glFlush();
}

void reshape (int w, int h)
{
    glViewport (0, 0, (GLsizei) w, (GLsizei) h);
    glMatrixMode (GL_PROJECTION);
    glLoadIdentity();
    if (w <= h)
    glOrtho (-13.5, 13.5, -13.5*(GLfloat)h/(GLfloat)w,
    13.5*(GLfloat)h/(GLfloat)w, - 30.0, 300.0);
    else
    glOrtho (-13.5*(GLfloat)w/(GLfloat)h, 13.5*(GLfloat)w/(GLfloat)h, -
    13.5, 13.5, -30.0, 30.0);
    glMatrixMode(GL_MODELVIEW);
    glLoadIdentity();
}

void myinit()
{
    glClearColor (0.0, 0.0, 0.0, 0.0);
    glColor3f(0.0, 0.0, 0.0);
    GLfloat light_position_diff[] = { -1.0, 1.0, 1.0, 0.0 };
    GLfloat diffuse_light[] = { 0.0, 0.0, 1.0, 1.0 };
    GLfloat light_position_spec[] = { 1.0, 1.0, 1.0, 0.0 };
    GLfloat specular_light[] = { 0.0, 1.0, 0.0, 1.0 };
    GLfloat ambient_light[] = { 0.9, 0.9, 0.9, 1.0 };
    glLightfv(GL_LIGHT0, GL_POSITION, light_position_diff);
    glLightfv(GL_LIGHT0, GL_DIFFUSE, diffuse_light);
    glLightfv(GL_LIGHT1, GL_POSITION, light_position_spec);
    glLightfv(GL_LIGHT1, GL_SPECULAR, specular_light);
    glLightModelfv(GL_LIGHT_MODEL_AMBIENT,ambient_light);
    glEnable(GL_LIGHTING);
    glEnable(GL_DEPTH_TEST);
    glShadeModel (GL_SMOOTH);
    glEnable(GL_LIGHT0);
    glEnable(GL_LIGHT1);
}

void myIdle(){
    theta +=0.03;
    display();
}

void mykey(unsigned char key, int mouseX, int mouseY){
    if (key=='1'){
            if (amb == true){
                GLfloat ambient_light[] = { 0.3, 0.3, 0.3, 1.0 };
                glLightModelfv(GL_LIGHT_MODEL_AMBIENT,ambient_light);
                amb = false;
                }else{
                    GLfloat ambient_light[] = { 0.9, 0.9, 0.9, 1.0 };
                    glLightModelfv(GL_LIGHT_MODEL_AMBIENT,ambient_light);
                    amb = true;
                    }
                }
                if (key=='2'){
                        if (diff == true){
                            glDisable(GL_LIGHT0);
                diff = false;
                }
                else{
                        glEnable(GL_LIGHT0);
                        diff = true;
                    }
                }
                if (key=='3'){
                        if (spec == true){
                            glDisable(GL_LIGHT1);
                            spec = false;
                            }else{
                                glEnable(GL_LIGHT1);
                                spec = true;
                                }
                            }
                        display();
                    }
/*
void keykeyboard(unsigned char key, int x, int y)
{
    switch (key)
    {
        case 'q':
            exit(0);
            break;
        case 'w':
            w=1;
            xx=1;
            yy=0;
            zz=0;
            glutPostRedisplay();
            break;
        case 'e':
            w=1;
            xx=0;
            yy=1;
            zz=0;
            glutPostRedisplay();
            break;
        case 'r':
            w=1;
            xx=0;
            yy=0;
            zz=1;
            glutPostRedisplay();
            break;
    }
}

void myinit()
{
    glMatrixMode(GL_PROJECTION);
    glLoadIdentity();
    glOrtho(-13.0,13.0,-13.0,13.0,-13.0,13.0);
    glMatrixMode(GL_MODELVIEW);
    glClearColor(0.0,0.0,0.0,1.0);
    glColor3f(0.0,0.0,0.0);
    glShadeModel(GL_FLAT);
    glEnable(GL_DEPTH_TEST);
}
*/
int main(int argc, char* argv[])
{
    glutInit(&argc,argv);
    glutInitDisplayMode(GLUT_SINGLE | GLUT_RGB | GLUT_DEPTH);
    glutInitWindowSize(500,500);
    glutInitWindowPosition(100,100);
    glutCreateWindow("Penchayaan Rumah Sederhana");
    glutDisplayFunc(display);
    glutReshapeFunc(reshape);
    glutIdleFunc(myIdle);
    glutKeyboardFunc(mykey);
    myinit();
    glutMainLoop();
    return 0;
}
